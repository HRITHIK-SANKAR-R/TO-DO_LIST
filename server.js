const express = require('express');
const postgres = require('postgres');
const app = express();
const { Pool } = require('pg');
const port=6969;
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();



app.use(cors())
app.use(express.urlencoded({extended: true}));
app.use(express.json())



//Details of the database

const pool = new Pool({
    user: process.env.USER_NAME,
    host: process.env.HOST_NAME,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    dialect: process.env.DB_DIALECT,
    port: process.env.PORT_NUMBER
})


//Connection establishment
pool.connect((err, client, release) => {
    if(err){
        return console.error(
            'Error in connectionss', err.stack
        )
    }
    client.query('SELECT NOW()', (err, result)=>{
        release()
        if(err){
            return console.error(
                'Error executing query', err.stack
            )
        }
        console.log("Connected to Database.")
    })
})



//CREATING A TABLE
pool.query(`
CREATE TABLE IF NOT EXISTS TO_DO (
    "Id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 10120 MINVALUE 10120 MAXVALUE 2147483647 CACHE 1),
    "Task" VARCHAR(255) NOT NULL,
    "Created" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "Status" boolean NOT NULL DEFAULT false
  )`,
  (err) => {
    if (err) {
        console.error('Error creating table:', err.message);
    } else {
        console.log('Table created successfully');
    }
  }
);



//INSERTING VALUES IN TABLE
app.post('/', async (req, res) => {
  const { Task } = req.body;

  const sql = 'INSERT INTO TO_DO ("Task") VALUES ($1) RETURNING "Id"';
  const params = [Task];

  try {
      const result = await pool.query(sql, params);
      const id=result.rows[0].Id;
      console.log(id);
      res.status(200).json({ Id: result.rows[0].id,Task });
  } catch (error) {
      console.error(error.message);
      if (error.code === '23505') {
          return res.status(409).json({ error: 'Task already exists' });
      }
      res.status(500).json({ error: 'Server error' });
  }
});


 
//RETRIEVING VALUES FROM THE TABLE
  app.get('/', (req, res) => {
    pool.query('SELECT * FROM TO_DO ORDER BY "Id" ASC;', (err, result) => {
      if (err) {
        console.error(err.message);
        return res.status(500).json({ error: 'Server error' });
      }
  
      const tasks = result.rows.reduce((acc, task) => {
        task.status ? acc.Completed.push(task) : acc.Incomplete.push(task);
        return acc;
      }, { Completed: [], Incomplete: [] });
  
      res.json(tasks);
    });
  });
  


//UPDATING THE VALUES OF THE STATUS
  app.put('/', async (req, res) => {
    const { Id, Status } = req.body;
    const params = [Status,Id]; 
  
    const sql = 'UPDATE TO_DO SET "Status" = $1 WHERE "Id" = $2 RETURNING "Id"';
  
    try {
      const result = await pool.query(sql, params);
      console.log(Id);
      const id=result.rows[0].Id;
      res.status(200).json({Id: result.rows[0].id,Status});
    } catch (error) {
      console.error(error.message);
      res.status(500).json({ error: 'Server error' });
    }
  });
  
  

//DELETING VALUES FROM THE TABLE
   app.delete('/:Id', async(req, res) => { //specify the id
   const { Id } = req.params;
   const params=[Id];
   const sql='DELETE FROM TO_DO WHERE "Id" = $1 RETURNING "Id"';
    try {
      const result = await pool.query(sql, params);
      if (result.rows.length === 0) {
        return res.status(404).json({ error: 'Task not found' });
      }
      const id=result.rows[0].Id;
      return res.json({ Message: 'Task deleted successfully', DeletedTaskId: Id });
    } catch (error) {
      console.error(error.message);
      return res.status(500).json({ error: 'Server error' });
    }
      
    });
  

  //DELETING ALL ROWS FROM THE TABLE
    app.delete('/', (req, res) => {
      pool.query('DELETE FROM TO_DO', (err, result) => {
        if (err) {
          console.error(err.message);
          return res.status(500).json({ error: 'Server error' });
        }
    
      return res.json({ Message: 'All tasks deleted successfully' });
      });
    });
  


  app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
  });